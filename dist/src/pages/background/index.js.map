{"version":3,"file":"index.js","sources":["../../../../src/helper/notifications.ts","../../../../src/pages/background/index.ts"],"sourcesContent":["export function create(title, message, url) {\n  chrome.notifications.create({\n    type: 'basic',\n    iconUrl: url,\n    title,\n    message,\n  });\n}\n","import reloadOnUpdate from \"virtual:reload-on-update-in-background-script\";\nimport Sync from '../../helper/sync';\nimport { create as createNotice } from '../../helper/notifications';\nimport { APP_ACTIONS } from '../../common/constant';\nimport { BackMsg, PageMsg } from '../../common/types';\n\nreloadOnUpdate(\"pages/background\");\n\n// Listen to messages sent from other parts of the extension.\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // onMessage must return \"true\" if response is async.\n  let isResponseAsync = false;\n\n  if (request.popupMounted) {\n    console.log('eventPage notified that Popup.tsx has mounted.');\n  }\n\n  return isResponseAsync;\n});\n\nlet sync = new Sync();\n\nfunction msgHandler(req: PageMsg, sender, resp) {\n  let { action, data, callbackId } = req;\n  console.log('msgHandler -> req', req);\n\n  function handler(results, isAsync = false) {\n    const msg: BackMsg = {\n      msg: `${action} response`,\n      callbackId,\n      data: results,\n    };\n\n    if (!isAsync) {\n      resp(msg);\n    }\n  }\n\n  if (action === APP_ACTIONS.IMPORT_DATA) {\n    init();\n    handler('');\n  } else if (action === APP_ACTIONS.START_SYNC) {\n    sync.tryStartSync();\n    handler('');\n  } else if (action === APP_ACTIONS.STOP_SYNC) {\n    sync.stopSync();\n    handler('');\n  }\n}\n\n['onMessage', 'onMessageExternal'].forEach((msgType) => {\n  chrome.runtime[msgType].addListener(msgHandler);\n});\n\nfunction initSync() {\n  sync.on('received', () => {\n    createNotice('Data Sync', 'The latest data has been synced from the cloud', chrome.runtime.getURL('/img/success.png'));\n  });\n}\n\nfunction init() {\n  initSync();\n}\n\ninit();\n"],"names":["create","title","message","url","reloadOnUpdate","request","sender","sendResponse","isResponseAsync","sync","Sync","msgHandler","req","resp","action","data","callbackId","handler","results","isAsync","msg","APP_ACTIONS","init","msgType","initSync","createNotice"],"mappings":"urBAAgB,SAAAA,EAAOC,EAAOC,EAASC,EAAK,CAC1C,OAAO,cAAc,OAAO,CAC1B,KAAM,QACN,QAASA,EACT,MAAAF,EACA,QAAAC,CAAA,CACD,CACH,CCDAE,EAAe,kBAAkB,EAGjC,OAAO,QAAQ,UAAU,YAAY,CAACC,EAASC,EAAQC,IAAiB,CAEtE,IAAIC,EAAkB,GAEtB,OAAIH,EAAQ,cACV,QAAQ,IAAI,gDAAgD,EAGvDG,CACT,CAAC,EAED,IAAIC,EAAO,IAAIC,EAEf,SAASC,EAAWC,EAAcN,EAAQO,EAAM,CAC9C,GAAI,CAAE,OAAAC,EAAQ,KAAAC,EAAM,WAAAC,CAAA,EAAeJ,EAC3B,QAAA,IAAI,oBAAqBA,CAAG,EAE3B,SAAAK,EAAQC,EAASC,EAAU,GAAO,CACzC,MAAMC,EAAe,CACnB,IAAK,GAAGN,aACR,WAAAE,EACA,KAAME,CAAA,EAGHC,GACHN,EAAKO,CAAG,CAEZ,CAEIN,IAAWO,EAAY,aACpBC,IACLL,EAAQ,EAAE,GACDH,IAAWO,EAAY,YAChCZ,EAAK,aAAa,EAClBQ,EAAQ,EAAE,GACDH,IAAWO,EAAY,YAChCZ,EAAK,SAAS,EACdQ,EAAQ,EAAE,EAEd,CAEA,CAAC,YAAa,mBAAmB,EAAE,QAASM,GAAY,CAC/C,OAAA,QAAQA,GAAS,YAAYZ,CAAU,CAChD,CAAC,EAED,SAASa,GAAW,CACbf,EAAA,GAAG,WAAY,IAAM,CACxBgB,EAAa,YAAa,iDAAkD,OAAO,QAAQ,OAAO,kBAAkB,CAAC,CAAA,CACtH,CACH,CAEA,SAASH,GAAO,CACLE,GACX,CAEAF,EAAK"}